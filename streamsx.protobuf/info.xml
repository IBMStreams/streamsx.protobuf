<?xml version="1.0" encoding="UTF-8"?>
<toolkitInfoModel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.ibm.com/xmlns/prod/streams/spl/toolkitInfo" xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/toolkitInfo toolkitInfoModel.xsd">
  <identity>
    <name>streamsx.protobuf</name>
    <description><![CDATA[
IBM Streams Protobuf Toolkit

The `streamsx.protobuf` toolkit contains operators for interacting with serialized protocol
buffer messages. It contains two conversion operators and two simple source operators.

Currently, this toolkit only support `proto2` syntax.

Examples can be found in the `streamsx.protobuf.samples` directory.

# Conversion operators

1. `ProtobufParse` takes a tuple with a `blob` field and emits a tuple matching the `protoMessage`
   parameter type it is given.

2. `ProtobufBuild` takes a tuple as generated by the `spl-schema-from-protobuf` script (see below)
   and emits a serialized version in the Protobuf serialization format as a blob.

# Source operators

1. `ProtobufTCPSource` creates a TCP server that will accept connections which can pass 1 or
   more Protobuf messages, each prefixed with a 4-byte record length.

2. `ProtobufFileSource` reads binary files that contain Protobuf messages, each prefixed with
   a 4-byte record length.

# Configuration

The `streamsx.protobuf` toolkit requires the Protobuf libraries are installed on the compiling
machine. Two environment variables are required: `$STREAMSX_PROTOBUF_LIBPATH` and `$STREAMSX_PROTOBUF_INCLUDEPATH`.

# Generating schemas

This toolkit contains a script under `streamsx.protobuf/bin` called `spl-schema-from-protobuf`. This script
will generate tuples in SPL to match the Protobuf messages in .proto files. This is required to use the
conversion operators. `ProtobufParse` must emit the tuple generated by the script corresponding to the
Protobuf message it is receiving, and `ProtobufBuild` must receive the tuple generated by the script
corresponding to the Protobuf message it is sending.

For all message and enum names, `_pb` is appended to the identifier. For all field names or enum values, `_`
is appended to the identifier. An example can be seen in `streamsx.protobuf.samples`.

# Usage

To use this toolkit, create an empty application. Place your `.proto` file inside `<application>/impl`.

Call: `<path to streamsx.protobuf toolkit>/bin/spl-schema-from-protobuf impl <your protobuf file name>`

This will generate the SPL schema to use with the conversion operators. Next, you will invoke one of the
operators within your composite. If you have a Protobuf message named `my.package.MyMessage`, then given
the file:

    // MyMessage.proto

    syntax = "proto2";

    package my.package;

    message MyMessage {
        required string field = 1;
    }

The following SPL will be generated:

    // my.package/MyMessage\_pb.spl

    namespace my.package;

    use my.package::*;

    type MyMessage_pb = tuple<
        rstring field_
    >;

 ProtobufParse invocation

To use the ProtobufParse operator, it is invoked like this:

    stream<blob recordData> serializedRecords = ProtobufFileSource() {
        param
            file: "<binary file>";
    }

    stream<my.package::MyMessage_pb> myMessages = ProtobufParse(serializedRecords) {
        param
            dataAttribute: recordData;
            protoMessage: "my.package.MyMessage";
            protoDirectory: "impl";
            protoRootFile: "MyMessage.proto";
    }

 ProtobufBuild invocation

To use the ProtobufBuild operator, it is invoked like this:

    stream<my.package::MyMessage_pb> myMessages = Beacon() {
        param
            period: 1.0;
        output
            myMessages: field_ = "<value>";
    }

    stream<blob recordData> serializedRecords = ProtobufParse(myMessages) {
        param
            protoMessage: "my.package.MyMessage";
            protoDirectory: "impl";
            protoRootFile: "MyMessage.proto";
    }

# Under the hood

How do the converters work?

They utilize a grammar file in `yapp`, which is a Perl port of `yacc`. The grammar defines the `proto2` syntax
according to the Google language specification sheet. The `yapp` grammar is compiled into a Perl module, which
generates a parse tree containing all message and enum definitions within the file. For each import from the
root file, this process is repeated until all files have been processed.

The Build/Parse operators iterate through this parse tree to map Protobuf message values into and out of Streams
tuples. At compile time, these operators run this parser to create the tree, and then they run the `protoc`
command to generate the C++ that is the messages will use. The C++ is compiled into a shared object library
named `libcustomproto.so`, which is stored in the application directory's `impl/lib`. This means that if more
than one Build and/or Parse operator exists in the same composite, they cannot be compiled in parallel and they
must used the same Protobuf definitions. Otherwise, race conditions will occur and one or both will be
non-functional at run time.

Variable mapping is generated recursively, so infinitely complex messages can be handled. There are two limitations:
These operators cannot handle `group` fields or `oneof` fields. Oneof fields are planned for future implementation,
but group fields have been deprecated by Google in favor of nested messages.

Every available effort to ensure the readability of the generated code was made, as this makes debugging issues
much easier. Feel free to take a look. However, all variable names are randomly generated to reduce the likelihood
of a name collision. Name collisions are not checked beforehand, as the likelihood of not having a name collision in
a message with 100 fields is (1-1/52^20)^100, which is infintessimally small.

Some older versions of the `protoc` compiler do not require the first line to state `syntax = "proto2";`, but this
parser requires the statement to be present regardless of the version of `protoc` installed.
]]>
    </description>
    <version>1.0.0.0</version>
    <requiredProductVersion>4.0.0.0</requiredProductVersion> 
  </identity>
  <dependencies/>
</toolkitInfoModel>
