<?xml version="1.0" ?>
<operatorModel
  xmlns="http://www.ibm.com/xmlns/prod/streams/spl/operator" 
  xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/operator operatorModel.xsd">
  <cppOperatorModel>
    <context> 
      <description><![CDATA[
`ProtobufFileSource` takes in a binary dump of Protobuf records in a common, but strict format.
Each record is prepended by a 4 byte header indicating the length of the Protobuf message, as shown:

    [4 bytes recordLength] [n bytes record] [4 bytes recordLength] [n bytes record] ...

For each record found, a tuple is emitted with a blob field containing the record. The operator will use the first blob data type field it finds at compile time. If none exists, it will fail.
The `ProtobufFileSource` takes a parameter specifying the file to be read. This file is assumed to be relative to the data directory, unless an absolute path is given.

+ Examples

# Examples

This shows you how to read a single file.

    stream<blob record> serializedRecords = ProtobufFileSource() {
        param
            file: "my/file/serialized.bin";
    }

You can also have ProtobufFileSource take an optional input port, with an rstring field containing file names to be read. This can be combined with DirScan to read files. ProtobufFileSource does not currently support moving files after processing.

    stream<blob record> serializedRecords = ProtobufFileSource(fileNames) {
    }

]]>
      </description>
      <providesSingleThreadedContext>Never</providesSingleThreadedContext>
    </context>  
    <parameters>
        <allowAny>false</allowAny>
        <parameter>
            <name>file</name>
            <description>The name of the file to be read</description>
            <optional>true</optional>
            <rewriteAllowed>false</rewriteAllowed>
            <expressionMode>Expression</expressionMode>
            <type>rstring</type>
            <cardinality>1</cardinality>
        </parameter>
    </parameters>
    <inputPorts>
      <inputPortOpenSet>
        <tupleMutationAllowed>true</tupleMutationAllowed>
        <windowingMode>NonWindowed</windowingMode>
        <windowPunctuationInputMode>Oblivious</windowPunctuationInputMode>
      </inputPortOpenSet>
    </inputPorts>
    <outputPorts>
      <outputPortOpenSet>
        <expressionMode>Nonexistent</expressionMode> 
        <autoAssignment>false</autoAssignment>
        <completeAssignment>false</completeAssignment>
        <rewriteAllowed>false</rewriteAllowed>
        <windowPunctuationOutputMode>Generating</windowPunctuationOutputMode>
        <tupleMutationAllowed>false</tupleMutationAllowed>
      </outputPortOpenSet>    
    </outputPorts>
  </cppOperatorModel>
</operatorModel>
